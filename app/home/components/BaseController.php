<?php
/**
 * Created by PhpStorm.
 * User: yangchunrun
 * Date: 16/5/13
 * Time: 下午8:16
 */

namespace app\home\components;


use app\base\lib\Utils;
use app\user\models\User;
use yii\web\Controller;

class BaseController extends Controller
{
    public $layout = "@app/home/views/layouts/main.php";

    public $mobile;

    public $uid;
//    public $enableCsrfValidation = false;

    public $username;

    public $assetUrl;


    public $user;

    public function beforeAction($action)
    {
        if (!\Yii::$app->user->isGuest) {
            $this->uid = \Yii::$app->user->id;
            $this->username = \Yii::$app->user->identity->username;
            $this->user = User::findOne($this->uid);

        }


        $this->assetUrl = \Yii::$app->assetManager->getPublishedUrl('@app/home/misc');

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }


    /**
     * 通用成功跳转
     * @param unknown $url 成功后跳转的URL
     * @param number $sec 自动跳转秒数
     * @return Ambigous <string, string>
     */
    public function success($msg, $url = [], $sec = 3)
    {
        $url = empty($url) ? \Yii::$app->getHomeUrl() : \yii\helpers\Url::toRoute($url);
        return $this->render('@app/home/views/default/msg', ['msg' => $msg, 'gotoUrl' => $url, 'sec' => $sec, 'type' => 'success']);
    }

    /**
     * 通用错误跳转
     * @param string $msg 错误提示信息
     * @param number $sec
     * @return Ambigous <string, string>
     */
    public function error($msg = '', $sec = 3)
    {
        return $this->render('@app/home/views/default/msg', ['msg' => $msg, 'sec' => $sec, 'type' => 'error']);
    }


    public function actions()
    {
        return [
            'upload' => [
                'class' => \xj\ueditor\actions\Upload::className(),
                'uploadBasePath' => '@webroot/static/files', //file system path
                'uploadBaseUrl' => '@web/static/files', //web path
                'csrf' => true, //csrf校验
                'configPatch' => [
                    'imageMaxSize' => 500 * 1024, //图片
                    'scrawlMaxSize' => 500 * 1024, //涂鸦
                    'catcherMaxSize' => 500 * 1024, //远程
                    'videoMaxSize' => 1024 * 1024, //视频
                    'fileMaxSize' => 1024 * 1024, //文件
                    'imageManagerListPath' => '/', //图片列表
                    'fileManagerListPath' => '/', //文件列表
                ],
                // OR Closure
                'pathFormat' => [
                    'imagePathFormat' => 'image/{yyyy}{mm}{dd}/{time}{rand:6}',
                    'scrawlPathFormat' => 'image/{yyyy}{mm}{dd}/{time}{rand:6}',
                    'snapscreenPathFormat' => 'image/{yyyy}{mm}{dd}/{time}{rand:6}',
                    'snapscreenPathFormat' => 'image/{yyyy}{mm}{dd}/{time}{rand:6}',
                    'catcherPathFormat' => 'image/{yyyy}{mm}{dd}/{time}{rand:6}',
                    'videoPathFormat' => 'video/{yyyy}{mm}{dd}/{time}{rand:6}',
                    'filePathFormat' => 'file/{yyyy}{mm}{dd}/{time}{rand:6}',
                ],

                // For Closure
                'pathFormat' => [
                    'imagePathFormat' => [$this, 'format'],
                    'scrawlPathFormat' => [$this, 'format'],
                    'snapscreenPathFormat' => [$this, 'format'],
                    'snapscreenPathFormat' => [$this, 'format'],
                    'catcherPathFormat' => [$this, 'format'],
                    'videoPathFormat' => [$this, 'format'],
                    'filePathFormat' => [$this, 'format'],
                ],

                'beforeUpload' => function ($action) {
//          throw new \yii\base\Exception('error message'); //break
                },
                'afterUpload' => function ($action) {
                    /*@var $action \xj\ueditor\actions\Upload */
//
//                    var_dump($action->result);

//                    throw new \yii\base\Exception('error message'); //break
                },
            ],
        ];
    }

    public function format(\xj\ueditor\actions\Uploader $action)
    {
        $fileext = $action->fileType;
        $filehash = sha1(uniqid() . time());
        $p1 = substr($filehash, 0, 2);
        $p2 = substr($filehash, 2, 2);
        return "{$p1}/{$p2}/{$filehash}.{$fileext}";
    }

}